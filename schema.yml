openapi: 3.0.3
info:
  title: VirtuAid API
  version: 1.0.0
  description: REST API for VirtuAid - Virtual Reality Therapy Platform for Care Homes.
    This API provides endpoints for managing care homes, residents, therapy sessions,
    emotion analysis, and more.
paths:
  /api/analysis/videos/:
    get:
      operationId: analysis_videos_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVideoList'
          description: ''
    post:
      operationId: analysis_videos_create
      tags:
      - analysis
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/analysis/videos/{id}/:
    get:
      operationId: analysis_videos_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetail'
          description: ''
    put:
      operationId: analysis_videos_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
    patch:
      operationId: analysis_videos_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVideoRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
    delete:
      operationId: analysis_videos_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/analysis/videos/{id}/analysis_status/:
    get:
      operationId: analysis_videos_analysis_status_retrieve
      description: Get the analysis status of a video
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/analysis/videos/{id}/download_data_csv/:
    get:
      operationId: analysis_videos_download_data_csv_retrieve
      description: Download emotion analysis data as CSV
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/analysis/videos/{id}/download_timeline_csv/:
    get:
      operationId: analysis_videos_download_timeline_csv_retrieve
      description: Download emotion timeline as CSV
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/analysis/videos/{id}/reanalyze/:
    post:
      operationId: analysis_videos_reanalyze_create
      description: Trigger reanalysis of the video
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this video.
        required: true
      tags:
      - analysis
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/analysis/videos/{video_pk}/frames/:
    get:
      operationId: analysis_videos_frames_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmotionAnalysisList'
          description: ''
  /api/analysis/videos/{video_pk}/frames/{id}/:
    get:
      operationId: analysis_videos_frames_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this emotion analysis.
        required: true
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmotionAnalysis'
          description: ''
  /api/analysis/videos/{video_pk}/summary/:
    get:
      operationId: analysis_videos_summary_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmotionAnalysisSummaryList'
          description: ''
  /api/analysis/videos/{video_pk}/summary/{id}/:
    get:
      operationId: analysis_videos_summary_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this emotion analysis summary.
        required: true
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmotionAnalysisSummary'
          description: ''
  /api/analysis/videos/{video_pk}/timeline/:
    get:
      operationId: analysis_videos_timeline_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmotionTimelineList'
          description: ''
  /api/analysis/videos/{video_pk}/timeline/{id}/:
    get:
      operationId: analysis_videos_timeline_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this emotion timeline.
        required: true
      - in: path
        name: video_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - analysis
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmotionTimeline'
          description: ''
  /api/auth/app/login/:
    post:
      operationId: auth_app_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/app/logout/:
    post:
      operationId: auth_app_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/password/change/:
    post:
      operationId: auth_app_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/password/reset/:
    post:
      operationId: auth_app_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/password/reset/confirm/:
    post:
      operationId: auth_app_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/register/:
    post:
      operationId: auth_app_register_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/app/register/resend-email/:
    post:
      operationId: auth_app_register_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/register/verify-email/:
    post:
      operationId: auth_app_register_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/app/token/refresh/:
    post:
      operationId: auth_app_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/app/token/verify/:
    post:
      operationId: auth_app_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/app/user/:
    get:
      operationId: auth_app_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    put:
      operationId: auth_app_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserDetailsRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    patch:
      operationId: auth_app_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetailsRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/user/:
    get:
      operationId: auth_user_retrieve
      description: Retrieve the details of the currently authenticated user.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceUser'
          description: ''
  /api/auth/users/:
    get:
      operationId: auth_users_list
      description: Retrieve a list of all interface users in the system.
      summary: List all users
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - Authentication
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInterfaceUserList'
          description: ''
    post:
      operationId: auth_users_create
      description: Create a new interface user. User type can be specified via query
        parameter.
      summary: Create a new user
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Type of user to create (admin, manager)
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceUserCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterfaceUserCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterfaceUserCreateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceUserCreate'
          description: ''
  /api/auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      description: Retrieve details of a specific user by ID.
      summary: Get user details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this interface user.
        required: true
      tags:
      - Authentication
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceUser'
          description: ''
    put:
      operationId: auth_users_update
      description: Update all fields of a specific user.
      summary: Update user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this interface user.
        required: true
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterfaceUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterfaceUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterfaceUserRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceUser'
          description: ''
    patch:
      operationId: auth_users_partial_update
      description: Update specific fields of a user.
      summary: Partially update user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this interface user.
        required: true
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInterfaceUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInterfaceUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInterfaceUserRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterfaceUser'
          description: ''
    delete:
      operationId: auth_users_destroy
      description: Delete a specific user from the system.
      summary: Delete user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this interface user.
        required: true
      tags:
      - Authentication
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/carehome-managers/:
    get:
      operationId: carehome_managers_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - carehome-managers
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCarehomeManagerList'
          description: ''
    post:
      operationId: carehome_managers_create
      tags:
      - carehome-managers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCarehomeManagerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateCarehomeManagerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCarehomeManagerRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCarehomeManager'
          description: ''
  /api/carehome-managers/{id}/:
    get:
      operationId: carehome_managers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this carehome managers.
        required: true
      tags:
      - carehome-managers
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarehomeManager'
          description: ''
    put:
      operationId: carehome_managers_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this carehome managers.
        required: true
      tags:
      - carehome-managers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarehomeManagerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CarehomeManagerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CarehomeManagerRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarehomeManager'
          description: ''
    patch:
      operationId: carehome_managers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this carehome managers.
        required: true
      tags:
      - carehome-managers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCarehomeManagerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCarehomeManagerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCarehomeManagerRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarehomeManager'
          description: ''
    delete:
      operationId: carehome_managers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this carehome managers.
        required: true
      tags:
      - carehome-managers
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/carehomes/:
    get:
      operationId: carehomes_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - carehomes
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCareHomeList'
          description: ''
    post:
      operationId: carehomes_create
      tags:
      - carehomes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareHome'
          description: ''
  /api/carehomes/{id}/:
    get:
      operationId: carehomes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this care homes.
        required: true
      tags:
      - carehomes
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareHome'
          description: ''
    put:
      operationId: carehomes_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this care homes.
        required: true
      tags:
      - carehomes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CareHomeRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareHome'
          description: ''
    patch:
      operationId: carehomes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this care homes.
        required: true
      tags:
      - carehomes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCareHomeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCareHomeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCareHomeRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareHome'
          description: ''
    delete:
      operationId: carehomes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this care homes.
        required: true
      tags:
      - carehomes
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/feedbacks/:
    get:
      operationId: feedbacks_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - feedbacks
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFeedbackList'
          description: ''
    post:
      operationId: feedbacks_create
      tags:
      - feedbacks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
  /api/feedbacks/{id}/:
    get:
      operationId: feedbacks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this feedback.
        required: true
      tags:
      - feedbacks
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    put:
      operationId: feedbacks_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this feedback.
        required: true
      tags:
      - feedbacks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    patch:
      operationId: feedbacks_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this feedback.
        required: true
      tags:
      - feedbacks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeedbackRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
    delete:
      operationId: feedbacks_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this feedback.
        required: true
      tags:
      - feedbacks
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reports/:
    get:
      operationId: reports_list
      parameters:
      - in: query
        name: end_date
        schema:
          type: string
          format: date
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: resident
        schema:
          type: string
          format: uuid
      - in: query
        name: start_date
        schema:
          type: string
          format: date
      tags:
      - reports
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReportsList'
          description: ''
    post:
      operationId: reports_create
      tags:
      - reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: ''
  /api/reports/{id}/:
    get:
      operationId: reports_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this reports.
        required: true
      tags:
      - reports
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: ''
    put:
      operationId: reports_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this reports.
        required: true
      tags:
      - reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReportsRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: ''
    patch:
      operationId: reports_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this reports.
        required: true
      tags:
      - reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReportsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReportsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReportsRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: ''
    delete:
      operationId: reports_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this reports.
        required: true
      tags:
      - reports
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/residents/:
    get:
      operationId: residents_list
      description: Retrieve a list of residents. Results are filtered based on user
        permissions.
      summary: List residents
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Residents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResidentList'
          description: ''
    post:
      operationId: residents_create
      description: Create a new resident in the care home system.
      summary: Create new resident
      tags:
      - Residents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResidentCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResidentCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResidentCreateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidentCreate'
          description: ''
  /api/residents/{id}/:
    get:
      operationId: residents_retrieve
      description: Retrieve detailed information about a specific resident.
      summary: Get resident details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this resident.
        required: true
      tags:
      - Residents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resident'
          description: ''
    put:
      operationId: residents_update
      description: Update all fields of a resident.
      summary: Update resident
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this resident.
        required: true
      tags:
      - Residents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResidentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResidentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResidentRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resident'
          description: ''
    patch:
      operationId: residents_partial_update
      description: Update specific fields of a resident.
      summary: Partially update resident
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this resident.
        required: true
      tags:
      - Residents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResidentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResidentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResidentRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resident'
          description: ''
    delete:
      operationId: residents_destroy
      description: Remove a resident from the system.
      summary: Delete resident
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this resident.
        required: true
      tags:
      - Residents
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sessions/:
    get:
      operationId: sessions_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: resident
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - completed
          - in_progress
          - scheduled
        description: |-
          * `scheduled` - Scheduled
          * `in_progress` - In Progress
          * `completed` - Completed
          * `cancelled` - Cancelled
      tags:
      - sessions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionList'
          description: ''
    post:
      operationId: sessions_create
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreateUpdate'
          description: ''
  /api/sessions/{id}/:
    get:
      operationId: sessions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    put:
      operationId: sessions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionCreateUpdateRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreateUpdate'
          description: ''
    patch:
      operationId: sessions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSessionCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSessionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSessionCreateUpdateRequest'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreateUpdate'
          description: ''
    delete:
      operationId: sessions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sessions/{id}/cancel_session/:
    post:
      operationId: sessions_cancel_session_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /api/sessions/{id}/mark_completed/:
    post:
      operationId: sessions_mark_completed_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /api/sessions/{id}/mark_in_progress/:
    post:
      operationId: sessions_mark_in_progress_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this therapy session.
        required: true
      tags:
      - sessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SessionRequest'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /api/sessions/{session_pk}/analysis/emotions/:
    get:
      operationId: sessions_analysis_emotions_list
      description: View to list all videos associated with a therapy session along
        with their analysis endpoints
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: session_pk
        schema:
          type: integer
        required: true
      tags:
      - sessions
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVideoList'
          description: ''
components:
  schemas:
    CareHome:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 150
        code:
          type: string
          nullable: true
          maxLength: 8
        address:
          type: string
      required:
      - address
      - id
      - name
    CareHomeRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 150
        code:
          type: string
          nullable: true
          minLength: 1
          maxLength: 8
        address:
          type: string
          minLength: 1
      required:
      - address
      - name
    CarehomeManager:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        manager:
          $ref: '#/components/schemas/InterfaceUser'
        carehome:
          $ref: '#/components/schemas/CareHome'
      required:
      - carehome
      - id
      - manager
    CarehomeManagerRequest:
      type: object
      properties:
        manager:
          $ref: '#/components/schemas/InterfaceUserRequest'
        carehome:
          $ref: '#/components/schemas/CareHomeRequest'
      required:
      - carehome
      - manager
    CreateCarehomeManager:
      type: object
      properties:
        carehome_id:
          type: string
          format: uuid
        manager_id:
          type: string
          format: uuid
      required:
      - carehome_id
      - manager_id
    CreateCarehomeManagerRequest:
      type: object
      properties:
        carehome_id:
          type: string
          format: uuid
        manager_id:
          type: string
          format: uuid
      required:
      - carehome_id
      - manager_id
    CustomTokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    CustomUserDetails:
      type: object
      properties:
        email:
          type: string
          format: email
          readOnly: true
        name:
          type: string
          maxLength: 125
        username:
          type: string
          nullable: true
          maxLength: 150
        is_admin:
          type: boolean
          readOnly: true
        avatar:
          type: string
          readOnly: true
      required:
      - avatar
      - email
      - is_admin
      - name
    CustomUserDetailsRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        username:
          type: string
          nullable: true
          maxLength: 150
      required:
      - name
    EmotionAnalysis:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        video:
          type: string
          format: uuid
        timestamp:
          type: number
          format: double
          description: Timestamp in seconds from the start of the video
        angry:
          type: number
          format: double
        sad:
          type: number
          format: double
        happy:
          type: number
          format: double
        dominant_emotion:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - dominant_emotion
      - id
      - timestamp
      - video
    EmotionAnalysisSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        video:
          type: string
          format: uuid
        angry_avg:
          type: number
          format: double
        sad_avg:
          type: number
          format: double
        happy_avg:
          type: number
          format: double
        dominant_emotion:
          type: string
          readOnly: true
        emotion_counts: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - dominant_emotion
      - id
      - updated_at
      - video
    EmotionTimeline:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        video:
          type: string
          format: uuid
        start_time:
          type: number
          format: double
          description: Start time in seconds from the start of the video
        end_time:
          type: number
          format: double
          description: End time in seconds from the start of the video
        duration:
          type: number
          format: double
          description: Duration of this emotion segment in seconds
        dominant_emotion:
          type: string
          maxLength: 20
        confidence:
          type: number
          format: double
          description: Confidence score for this emotion segment
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - dominant_emotion
      - duration
      - end_time
      - id
      - start_time
      - video
    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        session_date:
          type: string
          format: date
        session_duration:
          type: integer
          maximum: 2147483647
          minimum: 0
        vr_experience:
          type: string
        engagement_level:
          type: integer
          maximum: 5
          minimum: 1
        satisfaction:
          type: integer
          maximum: 5
          minimum: 1
        physical_impact:
          type: integer
          maximum: 5
          minimum: 1
        cognitive_impact:
          type: integer
          maximum: 5
          minimum: 1
        emotional_response:
          type: string
        feedback_notes:
          type: string
        resident:
          type: string
          format: uuid
      required:
      - cognitive_impact
      - created_at
      - emotional_response
      - engagement_level
      - id
      - physical_impact
      - resident
      - satisfaction
      - session_date
      - session_duration
      - vr_experience
    FeedbackRequest:
      type: object
      properties:
        session_date:
          type: string
          format: date
        session_duration:
          type: integer
          maximum: 2147483647
          minimum: 0
        vr_experience:
          type: string
          minLength: 1
        engagement_level:
          type: integer
          maximum: 5
          minimum: 1
        satisfaction:
          type: integer
          maximum: 5
          minimum: 1
        physical_impact:
          type: integer
          maximum: 5
          minimum: 1
        cognitive_impact:
          type: integer
          maximum: 5
          minimum: 1
        emotional_response:
          type: string
          minLength: 1
        feedback_notes:
          type: string
        resident:
          type: string
          format: uuid
      required:
      - cognitive_impact
      - emotional_response
      - engagement_level
      - physical_impact
      - resident
      - satisfaction
      - session_date
      - session_duration
      - vr_experience
    InterfaceUser:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 125
        email:
          type: string
          format: email
          maxLength: 254
        is_superadmin:
          type: string
          readOnly: true
        is_admin:
          type: string
          readOnly: true
        is_manager:
          type: string
          readOnly: true
      required:
      - email
      - id
      - is_admin
      - is_manager
      - is_superadmin
      - name
      - url
    InterfaceUserCreate:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 125
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
      - id
      - name
      - url
    InterfaceUserCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - name
      - password
    InterfaceUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
      required:
      - email
      - name
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/CustomUserDetails'
      required:
      - access
      - refresh
      - user
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PaginatedCareHomeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/CareHome'
    PaginatedCarehomeManagerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/CarehomeManager'
    PaginatedEmotionAnalysisList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/EmotionAnalysis'
    PaginatedEmotionAnalysisSummaryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/EmotionAnalysisSummary'
    PaginatedEmotionTimelineList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/EmotionTimeline'
    PaginatedFeedbackList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
    PaginatedInterfaceUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceUser'
    PaginatedReportsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reports'
    PaginatedResidentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Resident'
    PaginatedSessionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    PaginatedVideoList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedCareHomeRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 150
        code:
          type: string
          nullable: true
          minLength: 1
          maxLength: 8
        address:
          type: string
          minLength: 1
        admin:
          type: string
          format: uri
          nullable: true
    PatchedCarehomeManagerRequest:
      type: object
      properties:
        manager:
          $ref: '#/components/schemas/InterfaceUserRequest'
        carehome:
          $ref: '#/components/schemas/CareHomeRequest'
    PatchedCustomUserDetailsRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        username:
          type: string
          nullable: true
          maxLength: 150
    PatchedFeedbackRequest:
      type: object
      properties:
        session_date:
          type: string
          format: date
        session_duration:
          type: integer
          maximum: 2147483647
          minimum: 0
        vr_experience:
          type: string
          minLength: 1
        engagement_level:
          type: integer
          maximum: 5
          minimum: 1
        satisfaction:
          type: integer
          maximum: 5
          minimum: 1
        physical_impact:
          type: integer
          maximum: 5
          minimum: 1
        cognitive_impact:
          type: integer
          maximum: 5
          minimum: 1
        emotional_response:
          type: string
          minLength: 1
        feedback_notes:
          type: string
        resident:
          type: string
          format: uuid
    PatchedInterfaceUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
    PatchedReportsRequest:
      type: object
      properties:
        report_month:
          type: string
          format: date
        resident:
          type: string
          format: uri
        description:
          type: string
        pdf:
          type: string
          format: binary
    PatchedResidentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        date_of_birth:
          type: string
          format: date
        created_by:
          type: string
          format: uri
    PatchedSessionCreateUpdateRequest:
      type: object
      properties:
        scheduled_date:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/Status180Enum'
        notes:
          type: string
          nullable: true
        resident:
          type: string
          format: uuid
        feedback:
          type: string
          format: uuid
          nullable: true
    PatchedVideoRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        file:
          type: string
          format: binary
        therapy_session:
          type: integer
          nullable: true
        resident:
          type: string
          format: uuid
          nullable: true
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password1
      - password2
      - username
    Reports:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        report_month:
          type: string
          format: date
        resident:
          type: string
          format: uri
        description:
          type: string
        pdf:
          type: string
          format: uri
      required:
      - id
      - pdf
      - report_month
      - resident
      - url
    ReportsRequest:
      type: object
      properties:
        report_month:
          type: string
          format: date
        resident:
          type: string
          format: uri
        description:
          type: string
        pdf:
          type: string
          format: binary
      required:
      - pdf
      - report_month
      - resident
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    Resident:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 125
        date_of_birth:
          type: string
          format: date
        care_home:
          allOf:
          - $ref: '#/components/schemas/CareHome'
          readOnly: true
        created_by:
          type: string
          format: uri
      required:
      - care_home
      - created_by
      - date_of_birth
      - id
      - name
      - url
    ResidentCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 125
        date_of_birth:
          type: string
          format: date
      required:
      - date_of_birth
      - name
    ResidentCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        date_of_birth:
          type: string
          format: date
      required:
      - date_of_birth
      - name
    ResidentRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 125
        date_of_birth:
          type: string
          format: date
        created_by:
          type: string
          format: uri
      required:
      - created_by
      - date_of_birth
      - name
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Session:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        resident_details:
          allOf:
          - $ref: '#/components/schemas/Resident'
          readOnly: true
        feedback_status:
          type: string
          readOnly: true
        scheduled_date:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/Status180Enum'
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        resident:
          type: string
          format: uuid
        feedback:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - feedback_status
      - id
      - resident
      - resident_details
      - scheduled_date
      - updated_at
    SessionCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        scheduled_date:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/Status180Enum'
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        resident:
          type: string
          format: uuid
        feedback:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - resident
      - scheduled_date
      - updated_at
    SessionCreateUpdateRequest:
      type: object
      properties:
        scheduled_date:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/Status180Enum'
        notes:
          type: string
          nullable: true
        resident:
          type: string
          format: uuid
        feedback:
          type: string
          format: uuid
          nullable: true
      required:
      - resident
      - scheduled_date
    SessionRequest:
      type: object
      properties:
        scheduled_date:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/Status180Enum'
        notes:
          type: string
          nullable: true
        resident:
          type: string
          format: uuid
        feedback:
          type: string
          format: uuid
          nullable: true
      required:
      - resident
      - scheduled_date
    Status180Enum:
      enum:
      - scheduled
      - in_progress
      - completed
      - cancelled
      type: string
      description: |-
        * `scheduled` - Scheduled
        * `in_progress` - In Progress
        * `completed` - Completed
        * `cancelled` - Cancelled
    Status316Enum:
      enum:
      - pending
      - processing
      - completed
      - failed
      type: string
      description: |-
        * `pending` - Pending
        * `processing` - Processing
        * `completed` - Completed
        * `failed` - Failed
    TokenBlacklistRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        file:
          type: string
          format: uri
        file_size:
          type: integer
          readOnly: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status316Enum'
          readOnly: true
        therapy_session:
          type: integer
          nullable: true
        resident:
          type: string
          format: uuid
          nullable: true
      required:
      - file
      - file_size
      - id
      - status
      - title
      - updated_at
      - uploaded_at
    VideoDetail:
      type: object
      description: Detailed video serializer with emotion analysis summary and timeline
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        file:
          type: string
          format: uri
        file_size:
          type: integer
          readOnly: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status316Enum'
          readOnly: true
        therapy_session:
          type: integer
          nullable: true
        resident:
          type: string
          format: uuid
          nullable: true
        emotion_summary:
          allOf:
          - $ref: '#/components/schemas/EmotionAnalysisSummary'
          readOnly: true
      required:
      - emotion_summary
      - file
      - file_size
      - id
      - status
      - title
      - updated_at
      - uploaded_at
    VideoRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        file:
          type: string
          format: binary
        therapy_session:
          type: integer
          nullable: true
        resident:
          type: string
          format: uuid
          nullable: true
      required:
      - file
      - title
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication. Use 'Bearer <token>' format.
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: jwt-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Authentication
  description: User authentication and authorization
- name: Care Homes
  description: Care home management
- name: Care Home Managers
  description: Manager assignments for care homes
- name: Residents
  description: Resident management
- name: Therapy Sessions
  description: VR therapy session management
- name: Analysis
  description: Video emotion analysis and insights
- name: Reports
  description: Therapy reports and analytics
- name: Feedbacks
  description: Session feedback management
